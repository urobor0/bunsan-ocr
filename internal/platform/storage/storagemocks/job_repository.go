// Code generated by mockery 2.9.0. DO NOT EDIT.

package storagemocks

import (
	ocr "bunsan-ocr/internal/ocr"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// JobRepository is an autogenerated mock type for the JobRepository type
type JobRepository struct {
	mock.Mock
}

// FindById provides a mock function with given fields: ctx, id
func (_m *JobRepository) FindById(ctx context.Context, id ocr.JobID) (ocr.Job, error) {
	ret := _m.Called(ctx, id)

	var r0 ocr.Job
	if rf, ok := ret.Get(0).(func(context.Context, ocr.JobID) ocr.Job); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ocr.Job)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ocr.JobID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, job
func (_m *JobRepository) Save(ctx context.Context, job ocr.Job) error {
	ret := _m.Called(ctx, job)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ocr.Job) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id
func (_m *JobRepository) Update(ctx context.Context, id ocr.Job) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ocr.Job) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
